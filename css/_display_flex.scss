// Flexible Box
//   For Parent
//   - display: flex | inline-flex => To Start Flexible Box
//   - flex-direction: row => Default Value
//   - flex-wrap: nowrap => Default Value
//   - flex-flow: [Flex-Direction] + [Flex-Wrap]
//   - justify-content: flex-start => Default Value
//   - align-items: stretch => Default Value
//   - align-content: stretch => Default Value
//       => Align Items vs Align Content in Flexbox [https://youtu.be/UuiImHywwvs]
//       => Align Content = set of items as one component

//   For Child
//   - flex-grow: 0 => Default Value
//   - flex-shrink: 1 => Default Value
//   - order: 0 => Default Value =>[-1 to get it in the first]
//   - flex-basis: auto => Default Value => [direction == row ? basis = width : basis = column]
//   - flex: [Flex Grow] [Flex Shrink] [Flex Basis] 0 1 Auto
//   - align-self: auto => Default Value

@mixin parentFlex(
  $display: flex,
  $row-gap: normal,
  $column-gap: normal,
  $align-items: normal,
  $justify-items: legacy,
  $align-content: normal,
  $justify-content: normal,
  $flex-direction: row,
  $flex-wrap: nowrap
) {
  display: $display;
  @if ($row-gap != normal or $column-gap != normal) {
    gap: $row-gap $column-gap;
  }
  @if ($align-items != normal or $justify-items != legacy) {
    place-items: $align-items $justify-items;
  }
  @if ($align-content != normal or $justify-content != normal) {
    place-content: $align-content $justify-content;
  }
  @if ($flex-direction != row or $flex-wrap != nowrap) {
    flex-flow: $flex-direction $flex-wrap;
  }
  @content;
}

@mixin childFlex(
  $child-width: auto,
  $child-margin: 0,
  $child-padding: 0,
  $child-flex-grow: 0,
  $child-flex-shrink: 1,
  $child-flex-basis: auto
) {
  @if ($child-width != auto) {
    width: $child-width;
  }
  @if ($child-margin != 0) {
    margin: $child-margin;
  }
  @if ($child-padding != 0) {
    padding: $child-padding;
  }
  @if (
    $child-flex-grow !=
      0 or
      $child-flex-shrink !=
      1 or
      $child-flex-basis !=
      auto
  ) {
    flex: $child-flex-grow $child-flex-shrink $child-flex-basis;
  }
  @content;
}

// align-items:
// justify-items:
// place-items:
// => place-items: [https://developer.mozilla.org/en-US/docs/Web/CSS/place-items]

// => Content = set of items as one component
// align-content:
// justify-content:
// place-content:
// => place-content: [https://developer.mozilla.org/en-US/docs/Web/CSS/place-content]

// @include parentFlex();
// @include childFlex();
